
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Dec 30 11:43:08 COT 2019
//----------------------------------------------------

package alexico;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Dec 30 11:43:08 COT 2019
  */
public class Sintac extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintac() {super();}

  /** Constructor which sets the default scanner. */
  public Sintac(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintac(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\015\000\002\002\004\000\002\002\011\000\002\005" +
    "\004\000\002\005\003\000\002\007\002\000\002\004\007" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\010\002\000\002\006\006\000\002" +
    "\006\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\036\000\004\004\005\001\002\000\004\002\040\001" +
    "\002\000\004\022\006\001\002\000\004\016\007\001\002" +
    "\000\004\017\010\001\002\000\004\020\011\001\002\000" +
    "\004\024\012\001\002\000\004\010\017\001\002\000\006" +
    "\021\ufffe\024\012\001\002\000\004\021\015\001\002\000" +
    "\004\002\000\001\002\000\004\021\uffff\001\002\000\006" +
    "\016\021\025\020\001\002\000\016\012\ufff5\013\ufff5\014" +
    "\ufff5\015\ufff5\017\ufff5\023\ufff5\001\002\000\006\016\021" +
    "\025\020\001\002\000\014\012\024\013\025\014\026\015" +
    "\027\023\ufffd\001\002\000\004\023\034\001\002\000\006" +
    "\016\021\025\020\001\002\000\006\016\021\025\020\001" +
    "\002\000\006\016\021\025\020\001\002\000\006\016\021" +
    "\025\020\001\002\000\016\012\ufff9\013\ufff9\014\ufff9\015" +
    "\ufff9\017\ufff9\023\ufff9\001\002\000\016\012\ufff8\013\ufff8" +
    "\014\ufff8\015\ufff8\017\ufff8\023\ufff8\001\002\000\016\012" +
    "\ufffa\013\ufffa\014\026\015\027\017\ufffa\023\ufffa\001\002" +
    "\000\016\012\ufffb\013\ufffb\014\026\015\027\017\ufffb\023" +
    "\ufffb\001\002\000\006\021\ufffc\024\ufffc\001\002\000\014" +
    "\012\024\013\025\014\026\015\027\017\ufff7\001\002\000" +
    "\004\017\037\001\002\000\016\012\ufff6\013\ufff6\014\ufff6" +
    "\015\ufff6\017\ufff6\023\ufff6\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\036\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\012\005\013\001\001\000\002\001" +
    "\001\000\006\004\012\005\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\021\001" +
    "\001\000\002\001\001\000\004\006\034\001\001\000\004" +
    "\007\022\001\001\000\002\001\001\000\004\006\032\001" +
    "\001\000\004\006\031\001\001\000\004\006\030\001\001" +
    "\000\004\006\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintac$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintac$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintac$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    

    private Symbol s;

    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintac$actions {

public String resultado = "";

  private final Sintac parser;

  /** Constructor */
  CUP$Sintac$actions(Sintac parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintac$do_action(
    int                        CUP$Sintac$act_num,
    java_cup.runtime.lr_parser CUP$Sintac$parser,
    java.util.Stack            CUP$Sintac$stack,
    int                        CUP$Sintac$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintac$result;

      /* select the action based on the action number */
      switch (CUP$Sintac$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // E ::= NUMERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintac$stack.peek()).value;
		RESULT =  (String) a; 
              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // E ::= PARA E NT$1 PARC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)).value;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-3)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$1 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintac$stack.peek()).value;
RESULT = a; 
              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("NT$1",6, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // E ::= E TIMES E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintac$stack.peek()).value;
		 int val1 = Integer.parseInt((String) a);
                int val2 = Integer.parseInt((String) b);
                int r = val1*val2;
                RESULT = String.valueOf(r); 
              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // E ::= E DEVIDED E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintac$stack.peek()).value;
		 int val1 = Integer.parseInt((String) a);
                int val2 = Integer.parseInt((String) b);
                int r = val1/val2;
                RESULT = String.valueOf(r); 
              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // E ::= E MINUS E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintac$stack.peek()).value;
		 int val1 = Integer.parseInt((String) a);
                int val2 = Integer.parseInt((String) b);
                int r = val1-val2;
                RESULT = String.valueOf(r); 
              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // E ::= E PLUS E 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintac$stack.peek()).value;
		 int val1 = Integer.parseInt((String) a);
                int val2 = Integer.parseInt((String) b);
                int r = val1+val2;
                RESULT = String.valueOf(r); 
              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("E",4, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= ID ASSIGN E NT$0 PUNTOC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintac$stack.elementAt(CUP$Sintac$top-2)).value;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-4)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$0 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintac$stack.peek()).value;
 resultado= (String) a; 
              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("NT$0",5, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIAS ::= SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIAS ::= SENTENCIA SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INT MAIN PARA PARC LLAA SENTENCIAS LLAC 
            {
              Object RESULT =null;

              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-6)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          return CUP$Sintac$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)).value;
		RESULT = start_val;
              CUP$Sintac$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintac$stack.elementAt(CUP$Sintac$top-1)), ((java_cup.runtime.Symbol)CUP$Sintac$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintac$parser.done_parsing();
          return CUP$Sintac$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

